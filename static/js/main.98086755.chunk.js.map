{"version":3,"sources":["components/SubFeatures.jsx","App.jsx","index.js"],"names":["SubFeatures","props","subFeatureTotalPrice","featureValues","valueChange","valueBlur","FeatureData","mainFeature","map","mainFeatureIndex","Accordion","AccordionSummary","expandIcon","aria-controls","id","Grid","container","spacing","alignItems","item","xs","sm","className","title","Typography","dangerouslySetInnerHTML","__html","descriptions","subFeatureValue","subFeatureIndex","AccordionDetails","subFeature","Slider","max","maxValue","step","stepValue","value","onChange","event","aria-labelledby","Input","type","margin","target","onBlur","inputProps","min","unit","priceDescriptions","App","useState","rate","setRate","subFeatureValues","setSubFeatureValues","featureTotalPrice","i","s","featurePrice","Math","round","Helmet","priceDescription","index","placeholder","freeDisplayFlag","maxDisplayFlag","freeValue","previousState","newSubFeatureValues","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.98086755.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"../styles.css\";\r\n\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Slider from \"@material-ui/core/Slider\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport Accordion from \"@material-ui/core/Accordion\";\r\nimport AccordionSummary from \"@material-ui/core/AccordionSummary\";\r\nimport AccordionDetails from \"@material-ui/core/AccordionDetails\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\n\r\nimport FeatureData from \"../FeatureData.json\";\r\n\r\nexport const SubFeatures = (props) => {\r\n  const { subFeatureTotalPrice, featureValues, valueChange, valueBlur } = props;\r\n\r\n  return (\r\n    <>\r\n      {FeatureData.mainFeature.map((mainFeature, mainFeatureIndex) => {\r\n        return (\r\n          <Accordion key={mainFeatureIndex}>\r\n            <AccordionSummary\r\n              key={mainFeatureIndex}\r\n              expandIcon={<ExpandMoreIcon />}\r\n              aria-controls=\"panel1a-content\"\r\n              id=\"panel1a-header\"\r\n            >\r\n              <Grid\r\n                key={mainFeatureIndex}\r\n                container\r\n                spacing={3}\r\n                alignItems=\"center\"\r\n              >\r\n                <Grid\r\n                  key={\"grid1\" + mainFeatureIndex}\r\n                  item\r\n                  xs={12}\r\n                  sm={6}\r\n                  className=\"main-feature\"\r\n                >\r\n                  {mainFeature.title}\r\n                </Grid>\r\n                <Grid\r\n                  key={\"grid2\" + mainFeatureIndex}\r\n                  item\r\n                  xs={12}\r\n                  sm={3}\r\n                ></Grid>\r\n                <Grid\r\n                  key={\"grid3\" + mainFeatureIndex}\r\n                  item\r\n                  xs={12}\r\n                  sm={3}\r\n                  className=\"sub-feature-price\"\r\n                >\r\n                  {subFeatureTotalPrice(mainFeatureIndex)}\r\n                </Grid>\r\n                <Grid\r\n                  key={\"grid4\" + mainFeatureIndex}\r\n                  item\r\n                  xs={12}\r\n                  sm={9}\r\n                  className=\"main-feature-description\"\r\n                >\r\n                  <Typography\r\n                    key={mainFeatureIndex}\r\n                    dangerouslySetInnerHTML={{\r\n                      __html:\r\n                        FeatureData.mainFeature[mainFeatureIndex].descriptions\r\n                    }}\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n            </AccordionSummary>\r\n            {featureValues[mainFeatureIndex].map(\r\n              (subFeatureValue, subFeatureIndex) => {\r\n                return (\r\n                  <AccordionDetails key={subFeatureIndex}>\r\n                    <Grid\r\n                      key={subFeatureIndex}\r\n                      container\r\n                      spacing={3}\r\n                      alignItems=\"center\"\r\n                    >\r\n                      <Grid\r\n                        key={\"grid1\" + subFeatureIndex}\r\n                        item\r\n                        xs={12}\r\n                        className=\"sub-feature\"\r\n                      >\r\n                        {\r\n                          FeatureData.mainFeature[mainFeatureIndex].subFeature[\r\n                            subFeatureIndex\r\n                          ].title\r\n                        }\r\n                      </Grid>\r\n                      <Grid key={\"grid2\" + subFeatureIndex} item xs={12} sm={9}>\r\n                        <Slider\r\n                          key={subFeatureIndex}\r\n                          max={\r\n                            FeatureData.mainFeature[mainFeatureIndex]\r\n                              .subFeature[subFeatureIndex].maxValue\r\n                          }\r\n                          step={\r\n                            FeatureData.mainFeature[mainFeatureIndex]\r\n                              .subFeature[subFeatureIndex].stepValue\r\n                          }\r\n                          value={subFeatureValue}\r\n                          onChange={(event, subFeatureValue) =>\r\n                            valueChange(\r\n                              subFeatureValue,\r\n                              mainFeatureIndex,\r\n                              subFeatureIndex\r\n                            )\r\n                          }\r\n                          aria-labelledby=\"input-slider\"\r\n                        />\r\n                      </Grid>\r\n                      <Grid key={\"grid3\" + subFeatureIndex} item xs={12} sm={1}>\r\n                        <Input\r\n                          key={subFeatureIndex}\r\n                          value={subFeatureValue}\r\n                          type=\"number\"\r\n                          margin=\"dense\"\r\n                          onChange={(event) =>\r\n                            valueChange(\r\n                              event.target.value,\r\n                              mainFeatureIndex,\r\n                              subFeatureIndex\r\n                            )\r\n                          }\r\n                          onBlur={(event) =>\r\n                            valueBlur(event, subFeatureIndex, mainFeatureIndex)\r\n                          }\r\n                          inputProps={{\r\n                            step:\r\n                              FeatureData.mainFeature[mainFeatureIndex]\r\n                                .subFeature[subFeatureIndex].stepValue,\r\n                            min: 0,\r\n                            max:\r\n                              FeatureData.mainFeature[mainFeatureIndex]\r\n                                .subFeature[subFeatureIndex].maxValue,\r\n                            type: \"number\",\r\n                            \"aria-labelledby\": \"input-slider\"\r\n                          }}\r\n                        />\r\n                      </Grid>\r\n                      <Grid\r\n                        key={\"grid4\" + subFeatureIndex}\r\n                        item\r\n                        xs={12}\r\n                        sm={2}\r\n                        className=\"sub-feature-unit\"\r\n                      >\r\n                        {\r\n                          FeatureData.mainFeature[mainFeatureIndex].subFeature[\r\n                            subFeatureIndex\r\n                          ].unit\r\n                        }\r\n                      </Grid>\r\n                      <Grid\r\n                        key={\"grid5\" + subFeatureIndex}\r\n                        item\r\n                        xs={12}\r\n                        className=\"feature-price-description\"\r\n                      >\r\n                        {\r\n                          FeatureData.mainFeature[mainFeatureIndex].subFeature[\r\n                            subFeatureIndex\r\n                          ].priceDescriptions\r\n                        }\r\n                      </Grid>\r\n                    </Grid>\r\n                  </AccordionDetails>\r\n                );\r\n              }\r\n            )}\r\n          </Accordion>\r\n        );\r\n      })}\r\n    </>\r\n  );\r\n};\r\n","import React, { useState } from \"react\";\nimport \"./styles.css\";\nimport { Helmet } from \"react-helmet\";\n\nimport Grid from \"@material-ui/core/Grid\";\nimport FeatureData from \"./FeatureData.json\";\nimport { SubFeatures } from \"./components/SubFeatures.jsx\";\n\nexport const App = () => {\n  const mainDescriptions = [\n    \"Access ArcGIS Platform location services with your free developer subscription.\",\n    \"Estimate your costs for location services with the pricing calculator.\",\n    \"Free tiers of basemaps, geocodes, and other services are included in estimated cost.\",\n    \"<a href='https://www.esri.com/en-us/contact' target='_blank' rel='noopener noreferrer'>Contact us for high volume pricing</a>.\"\n  ];\n\n  const [rate, setRate] = useState(\"100.00\");\n  const onCangeRate = (event) => setRate(event.target.value);\n\n  const [subFeatureValues, setSubFeatureValues] = useState([\n    [0],\n    [0, 0],\n    [0, 0, 0, 0, 0, 0, 0],\n    [0, 0],\n    [0],\n    [0, 0]\n  ]);\n\n  const featureValueChange = (\n    subFeatureValue,\n    mainFeatureIndex,\n    subFeatureIndex\n  ) => {\n    setSubFeatureValues((previousState) => {\n      const newSubFeatureValues = [...previousState];\n      newSubFeatureValues[mainFeatureIndex][subFeatureIndex] = subFeatureValue;\n      return newSubFeatureValues;\n    });\n  };\n\n  const featureValueBlur = (event, subFeatureIndex, mainFeatureIndex) => {\n    if (event.target.value < 0) {\n      setSubFeatureValues(0);\n    } else if (\n      event.target.value >\n      FeatureData.mainFeature[mainFeatureIndex].subFeature[subFeatureIndex]\n        .maxValue\n    ) {\n      setSubFeatureValues(\n        FeatureData.mainFeature[mainFeatureIndex].subFeature[subFeatureIndex]\n          .maxValue\n      );\n    }\n  };\n\n  const subFeatureTotalPrice = (mainFeatureIndex) => {\n    let freeDisplayFlag = false;\n    let maxDisplayFlag = false;\n    let subFeatureTotalPrice = 0;\n\n    for (const i in subFeatureValues[mainFeatureIndex]) {\n      const freeValue =\n        FeatureData.mainFeature[mainFeatureIndex].subFeature[i].freeValue;\n      const maxValue =\n        FeatureData.mainFeature[mainFeatureIndex].subFeature[i].maxValue;\n      if (subFeatureValues[mainFeatureIndex][i] > 0) {\n        freeDisplayFlag = true;\n        if (subFeatureValues[mainFeatureIndex][i] >= freeValue) {\n          subFeatureTotalPrice =\n            subFeatureTotalPrice +\n            subFeatureValues[mainFeatureIndex][i] *\n              FeatureData.mainFeature[mainFeatureIndex].subFeature[i]\n                .featurePrice;\n          if (subFeatureValues[mainFeatureIndex][i] === maxValue) {\n            maxDisplayFlag = true;\n          }\n        }\n      }\n    }\n\n    if (subFeatureTotalPrice === 0 && freeDisplayFlag) {\n      return \"Free\";\n    } else if (subFeatureTotalPrice === 0 && !freeDisplayFlag) {\n      return \"Not Selected\";\n    } else if (maxDisplayFlag) {\n      return \"Contact Us\";\n    } else {\n      return `$ ${Math.round(subFeatureTotalPrice)} total approx`;\n    }\n  };\n\n  const featureTotalPrice = () => {\n    let featureTotalPrice = 0;\n    for (const i in subFeatureValues) {\n      for (const s in subFeatureValues[i]) {\n        featureTotalPrice =\n          featureTotalPrice +\n          subFeatureValues[i][s] *\n            FeatureData.mainFeature[i].subFeature[s].featurePrice;\n      }\n    }\n    featureTotalPrice = Math.round(featureTotalPrice);\n    return featureTotalPrice;\n  };\n\n  const featureTotalPriceJp = () => rate * featureTotalPrice();\n\n  return (\n    <div>\n      <Helmet>\n        <title>Pricing</title>\n      </Helmet>\n      <div className=\"main-area\">\n        <p className=\"main-title\">Location services pricing</p>\n        <Grid container spacing={3} alignItems=\"center\">\n          <Grid item xs={12} sm={7}>\n            <ul>\n              {mainDescriptions.map((priceDescription, index) => (\n                <li\n                  key={index}\n                  dangerouslySetInnerHTML={{ __html: priceDescription }}\n                />\n              ))}\n            </ul>\n          </Grid>\n          <Grid item xs={12} sm={5} className=\"total-price\">\n            Rete: $1= &yen;\n            <input\n              className=\"rate-input\"\n              placeholder=\"Rate\"\n              type=\"number\"\n              step=\"0.01\"\n              value={rate}\n              onChange={onCangeRate}\n            />{\" \"}\n            <br />$ {featureTotalPrice()} / month\n            <br />\n            &yen; {featureTotalPriceJp()} / month\n          </Grid>\n        </Grid>\n      </div>\n      <div className=\"service-area\">\n        <p className=\"service-title\">Services</p>\n        <SubFeatures\n          subFeatureTotalPrice={subFeatureTotalPrice}\n          featureValues={subFeatureValues}\n          valueChange={featureValueChange}\n          valueBlur={featureValueBlur}\n        />\n      </div>\n    </div>\n  );\n};\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport { App } from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}